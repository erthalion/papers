# BSON

http://crocodillon.com/blog/mongodb-for-dbas-introduction

>>> bson.dumps({"a": 3, "b": u"xyz"})
'\x17\x00\x00\x00\x10a\x00\x03\x00\x00\x00\x02b\x00\x04\x00\x00\x00xyz\x00\x00'
^ length of doc      ^ key  ^value            ^ key  ^ value length ^ value
                   ^ type of value          ^ type of value                 ^ end of object


The same representation for disk/memory

Direct access for the first element (see mongo/bson/bsonobj.h:firstElement and note about the _id)

# JSONB

Jsonb - on disk representation in form of a tree:

int32 varlen
root -> node -> node
         |___-> node

node -> header (uint32 whith is  type + length)
     -> variable length content

for one row in table:

```
analyze test;
vacuum full;

SELECT pg_relation_filepath(oid), relpages FROM pg_class WHERE relname = 'test';

 pg_relation_filepath | relpages 
----------------------+----------
 base/40960/325477    |        0
(1 row)
```

hexdump -C base/40960/325477

>>> "10 03 00 00 00 61 62 00 00 20 00 00 00 00 80 03 00 78 79 7a 00 00 00 00".replace(" ", "").decode("hex")
'\x10\x03\x00\x00\x00ab\x00\x00\x00\x00\x00\x00\x80\x03\x00xyz\x00\x00\x00\x00'
   ^ length          ^ keys                                ^ values

first int32 - object size in bytes

JsonbValue - in memory serialized representation, object/array has elements in list representation


# MYSQL JSON

binary representation in form of a tree:

first byte is a type

header (for object/array) -> member/elements count
                          -> size of binary value in bytes
                          -> list of pointers to keys/values/elements

body with actual values


Values are parsed lazily, so that only the parts of the
value that are interesting to the caller, are read. Array elements
can be looked up in constant time using the element() function.
Object members can be looked up in O(log n) time using the lookup()


############################################################################################

Add links to previous research/benchmarks


###########################################################################################


Add interesting story about migration or integration of nosql + sql ( ask Oleg)
Clean up graphics (remove legend, place it at the start and keep colors)
Group graphics with description before (what are we checking?)
Rotate size chart on 90 deg to make them horizontal (remove frame, legend, add all info into bars)

Sent intermediate result to prs@poborchy.ru for discussion

At the end say some closing words:

* you can see at your system and use this graphics to check whether or not you have such
  edge cases, or plan about the future (e.g., if your system is more about data upgrading with small
  amount of clients, then you can look at mongo, if you have many simultaneous clients, then PG).

* you can try this out on work tomorrow
